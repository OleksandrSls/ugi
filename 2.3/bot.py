import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
from groq import Groq  # üëà –∑–∞–º—ñ—Å—Ç—å openai

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ö–ª—é—á—ñ
GROQ_API_KEY = "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"
TELEGRAM_BOT_TOKEN = "7353760084:AAEIJ928tS3XKafMruV6qrrmp9pMsUc7ePo"

# –ö–ª—ñ—î–Ω—Ç Groq
client = Groq(api_key=GROQ_API_KEY)

# –§—É–Ω–∫—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –®–Ü
def get_gpt_response(prompt):
    print(f"[Groq GPT] –ó–∞–ø–∏—Ç: {prompt}")
    try:
        response = client.chat.completions.create(
            model="llama3-8b-8192",  # –ê–±–æ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ llama3-8b-8192
            messages=[{"role": "user", "content": prompt}]
        )
        reply = response.choices[0].message.content.strip()
        print(f"[Groq GPT] –í—ñ–¥–ø–æ–≤—ñ–¥—å: {reply}")
        return reply
    except Exception as e:
        print("[–ü–æ–º–∏–ª–∫–∞ Groq]:", str(e))
        return "‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ Groq API. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ."

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    print(f"[Start] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.first_name} (@{user.username}) –ø–æ—á–∞–≤ –¥—ñ–∞–ª–æ–≥.")
    welcome_text = (
        f"–ü—Ä–∏–≤—ñ—Ç, {user.first_name}!\n\n"
        "–Ø ‚Äî –±–æ—Ç, –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–æ —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É Groq (Mixtral). –ù–∞–ø–∏—à–∏ –º–µ–Ω—ñ –±—É–¥—å-—è–∫–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è ‚Äî —ñ —è –≤—ñ–¥–ø–æ–≤—ñ–º ü§ñ"
    )
    await update.message.reply_text(welcome_text)

# –û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_text = update.message.text
    print(f"[–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è] {user.first_name} (@{user.username}): {user_text}")

    response = get_gpt_response(user_text)
    await update.message.reply_text(response)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("[–ë–æ—Ç] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
    app.run_polling()

if __name__ == "__main__":
    main()
